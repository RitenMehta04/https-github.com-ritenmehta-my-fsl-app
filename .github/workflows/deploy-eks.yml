name: Deploy to EKS
on:
  push:
    branches: [main]

env:
  ECR_REPOSITORY: my-fsl-app # your ECR repo name
  AWS_REGION: us-east-1 # your AWS region
  CLUSTER_NAME: hilarious-electro-badger # ✅ your actual EKS cluster name
  NAMESPACE: production # namespace to deploy into

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write # required for OIDC auth if using role assumption

    steps:
      # Checkout your source code
      - name: Checkout
        uses: actions/checkout@v4

      # Configure AWS credentials (from secrets)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Build, tag, and push Docker image to ECR
      - name: Build, tag, and push image to Amazon ECR
        id: build-push
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      # Update kubeconfig so kubectl can talk to your EKS cluster
      - name: Update kubeconfig
        run: aws eks --region $AWS_REGION update-kubeconfig --name $CLUSTER_NAME

      # Deploy manifests to EKS
      - name: Deploy to EKS
        run: |
          # Replace <IMAGE> placeholder with actual ECR image
          sed -i 's|<IMAGE>|'${{ steps.build-push.outputs.image }}'|g' eks-manifest.yaml

          # Apply manifest to the cluster
          kubectl apply -f eks-manifest.yaml --validate=false

          # Show current pods in namespace
          kubectl get pods -n $NAMESPACE

      # Wait for all pods to become Ready before marking success
      - name: Wait for pods to become Ready
        run: |
          echo "⏳ Waiting for pods to be Ready..."
          kubectl rollout status deployment/my-fsl-app -n $NAMESPACE --timeout=180s || (
            echo "❌ Deployment did not become ready in time" && exit 1
          )

      # Verify deployment health
      - name: Verify deployment
        run: |
          echo "✅ Deployment completed successfully!"
          kubectl get pods -n $NAMESPACE
